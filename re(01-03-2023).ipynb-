{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2010-04-01 , Cont. For 2,800 2,259 541\n",
      "2010-05-01 , Cont. For 2,800 2,259 541\n",
      "2010-06-01 , Cont. For 2,800 2,259 541\n",
      "2010-07-01 , Cont. For 3,280 2,739 541\n",
      "2010-08-01 , Cont. For 2,960 2,419 541\n",
      "2010-09-01 , Cont. For 2,960 2,419 541\n",
      "2010-10-01 , Cont. For 2,960 2,419 541\n",
      "2010-11-01 , Cont. For 2,960 2,419 541\n",
      "2010-12-01 , Cont. For 2,960 2,419 541\n",
      "2011-01-01 , Cont. For 2,960 2,419 541\n",
      "2011-02-01 , Cont. For 2,960 2,419 541\n",
      "2011-03-01 , Cont. For 2,960 2,419 541\n",
      "2012-04-01 , Cont. For 3,226 2,685 541\n",
      "2013-11-01 , Cont. For 5,940 5,399 541\n",
      "2013-12-01 , Cont. For 5,400 4,859 541\n",
      "2014-01-01 , Cont. For 5,400 4,859 541\n",
      "2014-02-01 , Cont. For 5,400 4,859 541\n",
      "2014-03-01 , Cont. For 5,400 4,859 541\n",
      "2014-04-01 , Cont. For 5,400 4,859 541\n",
      "2014-05-01 , Cont. For 5,400 4,859 541\n",
      "2014-06-01 , Cont. For 5,400 4,859 541\n",
      "2014-07-01 , Cont. For 5,400 4,859 541\n",
      "2014-08-01 , Cont. For 5,400 4,859 541\n",
      "2014-09-01 , Cont. For 5,400 4,859 541\n",
      "2014-10-01 , Cont. For 5,400 4,150 1,250\n",
      "2014-11-01 , Cont. For 9,400 8,150 1,250\n",
      "2014-12-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-01-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-02-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-03-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-04-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-05-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-06-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-07-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-08-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-09-01 , Cont. For 6,400 5,150 1,250\n",
      "2015-10-01 , Cont. For 7,168 5,918 1,250\n",
      "2015-11-01 , Cont. For 7,168 5,918 1,250\n",
      "2015-12-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-01-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-02-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-03-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-04-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-05-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-06-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-07-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-08-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-09-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-10-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-11-01 , Cont. For 7,168 5,918 1,250\n",
      "2016-12-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-01-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-02-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-03-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-04-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-05-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-06-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-07-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-08-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-09-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-10-01 , Cont. For 7,168 5,918 1,250\n",
      "2017-11-01 , Cont. For 8,308 7,058 1,250\n"
     ]
    }
   ],
   "source": [
    "# Assignment2 (01-03-2023)\n",
    "#2010-04-01, Cont. For 042010 ,2800 2259 ,541\n",
    "import datetime\n",
    "text_file = open(\"pdfout5.txt\", \"r\")\n",
    "lines = text_file.readlines()\n",
    "# print(lines)\n",
    "text_file.close()\n",
    "pattern = re.compile(r'Cont. For (\\d{6})(\\s+(\\d{1,2},\\d{3}))(\\s+(\\d{1,2},\\d{3}))(\\s+(\\d{0,2},?\\d{3}))')\n",
    "for i in lines:\n",
    "    matches = pattern.finditer(i)\n",
    "    for match in matches:\n",
    "        dates=\"01\"+match.group(1)\n",
    "        print(datetime.date(int(dates[4:8]),int(dates[2:4]),int(dates[0:2])),\", Cont. For\",match.group(2).lstrip(),match.group(4).lstrip(),match.group(6).lstrip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name :   OAKTON GLOBAL TECHNOLOGY SERVICES CENTRE\n",
      "Name :   Koripella Krishna Chytanya\n",
      "Establishment ID :  APHYD0056980000\n",
      "Member ID :  APHYD00569800000000142\n",
      "Employee share :  539,521.00\n",
      "Employee share :  445,526.00\n",
      "City :  (RO)HYDERABAD\n"
     ]
    }
   ],
   "source": [
    "# Assignment-1 (01-03-2023)\n",
    "# From this text file, print user personal details present from line 3 to 9\n",
    "# Establishment ID   :        APHYD0056980000\n",
    "# Name: OAKTON GLOBAL TECHNOLOGY SERVICES CENTRE   INDIA PVT LTD\n",
    "# Member ID:                APHYD00569800000000142\n",
    "# Name:  Koripella Krishna Chytanya\n",
    "# Office Name                    (RO)HYDERABAD\n",
    "# Employee Share                        539,521.00\n",
    "# Employer Share                        445,526.00 \n",
    "import re\n",
    "\n",
    "with open(\"pdfout5.txt\",\"r\") as f:  \n",
    "#         pattern=re.compile(r'[a-zA-Z;]*\\|.*Name.*/(.*)')\n",
    "#         matches = pattern.finditer(line)\n",
    "#         for match in matches:\n",
    "#             print(match.group(1))\n",
    "\n",
    "        pattern=re.compile(r'[a-zA-Z;]*\\|.*Name.*/(.*)')\n",
    "        matches = pattern.finditer(test_string)\n",
    "        for match in matches:\n",
    "        #     print(match)\n",
    "            print(\"Name : \",match.group(1))\n",
    "\n",
    "        pat1 = re.compile(r'(Establishment).*([A-Za-z0-9]{15})')\n",
    "        mat1=pat1.finditer(test_string)\n",
    "        for match in mat1:\n",
    "            print(\"Establishment ID : \",match.group(2))\n",
    "\n",
    "        pat1 = re.compile(r'(Member).*([A-Za-z0-9]{22})')\n",
    "        mat1=pat1.finditer(test_string)\n",
    "        for match in mat1:\n",
    "            print(\"Member ID : \",match.group(2))\n",
    "\n",
    "        pat3 = re.compile(r'(Employee Share).*(\\d{3},\\d{3}\\.00)')\n",
    "        mat3=pat3.finditer(test_string)\n",
    "        for match in mat3:\n",
    "            print(\"Employee share : \",match.group(2))\n",
    "\n",
    "        pat4 = re.compile(r'(Employer Share).*(\\d{3},\\d{3}\\.00)')\n",
    "        mat4=pat4.finditer(test_string)\n",
    "        for match in mat4:\n",
    "            print(\"Employee share : \",match.group(2))\n",
    "\n",
    "        pat5 = re.compile(r'(Office Name)(.*)')\n",
    "        mat5=pat5.finditer(test_string)\n",
    "        for match in mat5:\n",
    "            print(\"City : \",match.group(2).lstrip())\n",
    "f.close()\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# https://www.youtube.com/watch?v=AEE9ecgLgdQ\n",
    "Youtube link"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<re.Match object; span=(0, 3), match='123'>\n",
      "<re.Match object; span=(15, 18), match='123'>\n",
      "123\n",
      "123\n",
      "<re.Match object; span=(0, 3), match='123'>\n",
      "<re.Match object; span=(0, 3), match='123'>\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "test_string = '123abc456789abc123ABC'\n",
    "pattern=re.compile(r'123')\n",
    "matches=pattern.finditer(test_string)\n",
    "for match in matches:\n",
    "    print(match)\n",
    "matches=pattern.findall(test_string)\n",
    "for match in matches:\n",
    "    print(match)\n",
    "matches=pattern.match(test_string)\n",
    "# for match in matches:\n",
    "print(matches)\n",
    "matches=pattern.search(test_string)\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123 0 3 (0, 3)\n",
      "123 15 18 (15, 18)\n"
     ]
    }
   ],
   "source": [
    "#Methods used on a match object\n",
    "import re\n",
    "test_string = '123abc456789abc123ABC'\n",
    "pattern=re.compile(r'123')\n",
    "matches=pattern.finditer(test_string)\n",
    "for match in matches:\n",
    "    print(match.group(),match.start(),match.end(),match.span())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Meta characters\n",
    "# . any character\n",
    "# ^ starts with\n",
    "# $ ends with\n",
    "# * zero or mote occurances\n",
    "# + one or more\n",
    "# {} exactly spec count\n",
    "# []  set of characters\n",
    "# \\ escape characters\n",
    "# | logical or\n",
    "# ( ) capture and grup\n",
    "\n",
    "import re\n",
    "test_string=\"hello hi thi8s is 123 @gmail.com hi can be my name and is hi 654\"\n",
    "pattern=re.compile(r\"\\B\")\n",
    "matches=pattern.finditer(test_string)\n",
    "for match in matches:\n",
    "    print(match)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<re.Match object; span=(1, 11), match='Mr Simpson'>\n",
      "<re.Match object; span=(12, 23), match='Mrs Simpson'>\n",
      "<re.Match object; span=(24, 33), match='Mr. Brown'>\n",
      "<re.Match object; span=(34, 42), match='Ms Smith'>\n",
      "<re.Match object; span=(43, 48), match='Mr. T'>\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "my_string = \"\"\"\n",
    "Mr Simpson\n",
    "Mrs Simpson\n",
    "Mr. Brown\n",
    "Ms Smith\n",
    "Mr. T\n",
    "\"\"\"\n",
    "\n",
    "pattern = re.compile(r\"Mr\\.?\\s\\w+\")\n",
    "pattern = re.compile(r\"(Mr|Ms|Mrs)\\.?\\s\\w+\")\n",
    "\n",
    "matches=pattern.finditer(my_string)\n",
    "for match in matches:\n",
    "    print(match)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<re.Match object; span=(1, 25), match='pythonengineer@gmail.com'>\n",
      "<re.Match object; span=(26, 48), match='Python-engineer@gmx.de'>\n",
      "<re.Match object; span=(49, 81), match='python-engineer123@my-domain.org'>\n"
     ]
    }
   ],
   "source": [
    "emails = \"\"\"\n",
    "pythonengineer@gmail.com\n",
    "Python-engineer@gmx.de\n",
    "python-engineer123@my-domain.org\n",
    "\"\"\"\n",
    "pattern = re.compile('[a-zA-Z0-9-]+@[a-zA-Z-]+\\.[a-z]+')\n",
    "# pattern = re.compile('[a-zA-Z1-9-]+@\\[a-zA-Z-]+\\.[a-zA-Z]+')\n",
    "matches = pattern.finditer(emails)\n",
    "for match in matches:\n",
    "    print(match)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello palnet u r my best palnet\n",
      "['', 'abc456789abc', 'ABC']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "test_string='hello world u r my best world'\n",
    "pattern=re.compile(r\"world\")\n",
    "subbed_string=pattern.sub(\"palnet\",test_string)\n",
    "print(subbed_string)\n",
    "test_string = '123abc456789abc123ABC'\n",
    "a=test_string.split('123')\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name :   OAKTON GLOBAL TECHNOLOGY SERVICES CENTRE\n",
      "Name :   Koripella Krishna Chytanya\n",
      "Establishment ID :  APHYD0056980000\n",
      "Member ID :  APHYD00569800000000142\n",
      "Employee share :  539,521.00\n",
      "Employee share :  445,526.00\n",
      "City :  (RO)HYDERABAD\n"
     ]
    }
   ],
   "source": [
    "# From this text file, print user personal details present from line 3 to 9\n",
    "\n",
    "\n",
    "import re\n",
    "test_string='''\n",
    "LFkkiuk vkbZMh@uke | Establishment ID/Name           APHYD0056980000 / OAKTON GLOBAL TECHNOLOGY SERVICES CENTRE\n",
    "                                                     INDIA PVT LTD\n",
    "lnL; vkbZMh@uke     | Member ID/Name                 APHYD00569800000000142 / Koripella Krishna Chytanya\n",
    "dk;kZy; dk uke      | Office Name                    (RO)HYDERABAD\n",
    "deZpkjh 'ks;j       | Employee Share                        539,521.00\n",
    "fu;ksDrk 'ks;j      | Employer Share                        445,526.00\n",
    "'''\n",
    "\n",
    "# regex = r'[a-zA-Z;]*\\|.*Name.*/(.*)'\n",
    "# match = re.search(regex, test_string) \n",
    "# print(match.start)\n",
    "\n",
    "pattern=re.compile(r'[a-zA-Z;]*\\|.*Name.*/(.*)')\n",
    "\n",
    "matches = pattern.finditer(test_string)\n",
    "\n",
    "for match in matches:\n",
    "#     print(match)\n",
    "    print(\"Name : \",match.group(1))\n",
    "\n",
    "pat1 = re.compile(r'(Establishment).*([A-Za-z0-9]{15})')\n",
    "mat1=pat1.finditer(test_string)\n",
    "for match in mat1:\n",
    "    print(\"Establishment ID : \",match.group(2))\n",
    "    \n",
    "pat1 = re.compile(r'(Member).*([A-Za-z0-9]{22})')\n",
    "mat1=pat1.finditer(test_string)\n",
    "for match in mat1:\n",
    "    print(\"Member ID : \",match.group(2))\n",
    "\n",
    "pat3 = re.compile(r'(Employee Share).*(\\d{3},\\d{3}\\.00)')\n",
    "mat3=pat3.finditer(test_string)\n",
    "for match in mat3:\n",
    "    print(\"Employee share : \",match.group(2))\n",
    "\n",
    "pat4 = re.compile(r'(Employer Share).*(\\d{3},\\d{3}\\.00)')\n",
    "mat4=pat4.finditer(test_string)\n",
    "for match in mat4:\n",
    "    print(\"Employee share : \",match.group(2))\n",
    "    \n",
    "pat5 = re.compile(r'(Office Name)(.*)')\n",
    "mat5=pat5.finditer(test_string)\n",
    "for match in mat5:\n",
    "    print(\"City : \",match.group(2).lstrip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "no such group",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-72-388070d4a758>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmatches\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;31m#     print(match)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: no such group"
     ]
    }
   ],
   "source": [
    "# Then transaction from line 20-62,72-140, 151-189\n",
    "import re\n",
    "temp=\"\"\"Cont. For 042010                                                 2,800               2,259                                                 541\n",
    "\n",
    "Cont. For 052010                                                 2,800               2,259                                                 541\n",
    "\n",
    "Cont. For 062010                                                 2,800               2,259                                                 541\n",
    "\n",
    "Cont. For 072010                                                 3,280               2,739                                                 541\n",
    "\n",
    "Cont. For 082010                                                 2,960               2,419                                                 541\n",
    "\n",
    "Cont. For 092010                                                 2,960               2,419                                                 541\n",
    "\n",
    "Cont. For 102010                                                 2,960               2,419                                                 541\n",
    "\n",
    "Cont. For 112010                                                 2,960               2,419                                                 541\n",
    "\n",
    "Cont. For 122010                                                 2,960               2,419                                                 541\n",
    "\"\"\"\n",
    "pattern=re.compile(r'')\n",
    "\n",
    "matches = pattern.finditer(temp)\n",
    "\n",
    "for match in matches:\n",
    "#     print(match)\n",
    "    print(match.group(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "response_content = f.read()\n",
    "    if re.search(r'[a-zA-Z;]*\\|.*Name.*/(.*)',response_content,re.I|re.S):\n",
    "            name=re.search(r'[a-zA-Z;]*\\|.*Name.*/(.*)',line,re.I|re.S).group(1)\n",
    "    for line in response_content:\n",
    "        if re.search(r'[a-zA-Z;]*\\|.*Name.*/(.*)',line,re.I|re.S):\n",
    "            name=re.search(r'[a-zA-Z;]*\\|.*Name.*/(.*)',line,re.I|re.S).group(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2010-04-01 ,\n",
      "2010-05-01 ,\n",
      "2010-06-01 ,\n",
      "2010-07-01 ,\n",
      "2010-08-01 ,\n",
      "2010-09-01 ,\n",
      "2010-10-01 ,\n",
      "2010-11-01 ,\n",
      "2010-12-01 ,\n",
      "2011-01-01 ,\n",
      "2011-02-01 ,\n",
      "2011-03-01 ,\n",
      "2012-04-01 ,\n",
      "2013-11-01 ,\n",
      "2013-12-01 ,\n",
      "2014-01-01 ,\n",
      "2014-02-01 ,\n",
      "2014-03-01 ,\n",
      "2014-04-01 ,\n",
      "2014-05-01 ,\n",
      "2014-06-01 ,\n",
      "2014-07-01 ,\n",
      "2014-08-01 ,\n",
      "2014-09-01 ,\n",
      "2014-10-01 ,\n",
      "2014-11-01 ,\n",
      "2014-12-01 ,\n",
      "2015-01-01 ,\n",
      "2015-02-01 ,\n",
      "2015-03-01 ,\n",
      "2015-04-01 ,\n",
      "2015-05-01 ,\n",
      "2015-06-01 ,\n",
      "2015-07-01 ,\n",
      "2015-08-01 ,\n",
      "2015-09-01 ,\n",
      "2015-10-01 ,\n",
      "2015-11-01 ,\n",
      "2015-12-01 ,\n",
      "2016-01-01 ,\n",
      "2016-02-01 ,\n",
      "2016-03-01 ,\n",
      "2016-04-01 ,\n",
      "2016-05-01 ,\n",
      "2016-06-01 ,\n",
      "2016-07-01 ,\n",
      "2016-08-01 ,\n",
      "2016-09-01 ,\n",
      "2016-10-01 ,\n",
      "2016-11-01 ,\n",
      "2016-12-01 ,\n",
      "2017-01-01 ,\n",
      "2017-02-01 ,\n",
      "2017-03-01 ,\n",
      "2017-04-01 ,\n",
      "2017-05-01 ,\n",
      "2017-06-01 ,\n",
      "2017-07-01 ,\n",
      "2017-08-01 ,\n",
      "2017-09-01 ,\n",
      "2017-10-01 ,\n",
      "2017-11-01 ,\n"
     ]
    }
   ],
   "source": [
    "# with open('pdfout5.txt','r') as f:\n",
    "#2010-04-01, Cont. For 042010 ,2800 2259 ,541\n",
    "import datetime\n",
    "text_file = open(\"pdfout5.txt\", \"r\")\n",
    "lines = text_file.readlines()\n",
    "# print(lines)\n",
    "text_file.close()\n",
    "pattern = re.compile(r'Cont. For (\\d{6})([\\w ]+)')\n",
    "for i in lines:\n",
    "    matches = pattern.finditer(i)\n",
    "    for match in matches:\n",
    "        dates=\"01\"+match.group(1)\n",
    "        print(datetime.date(int(dates[4:8]),int(dates[2:4]),int(dates[0:2])),\",\",)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2000-05-12\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "a=datetime.date(2000,5,12)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
